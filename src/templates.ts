import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import type { Nuxt } from '@nuxt/schema'
import type { Config } from 'tailwindcss'
import type { ModuleOptions } from './module'
import { colors, grayColors, colorsAsRegex, generateScale, type Color } from './runtime/colors'

export function addTemplates(options: ModuleOptions, nuxt: Nuxt) {
  nuxt.hook('tailwindcss:config', (tailwindConfig: Config) => {
    const defaultColors = ['primary', ...colors]

    const extendColors = defaultColors.reduce((acc: Record<string, Record<string, string>>, color) => {
      acc[color] = generateScale(color as Color)
      return acc
    }, {})

    const colorPatterns = defaultColors.reduce((patterns: { pattern: RegExp, variants: string[] }[], color) => {
      patterns.push(
        {
          pattern: new RegExp(`^bg-${color}-(a)?(1[0-2]|[1-9])$`),
          variants: ['hover', 'focus', 'active', 'group-hover'],
        },
        {
          pattern: new RegExp(`^text-${color}-(a)?(1[0-2]|[1-9])$`),
          variants: ['hover', 'focus', 'active', 'group-hover'],
        },
        {
          pattern: new RegExp(`^border-${color}-(a)?(1[0-2]|[1-9])$`),
          variants: ['hover', 'focus', 'active', 'group-hover'],
        },
        {
          pattern: new RegExp(`^ring-${color}-(a)?(1[0-2]|[1-9])$`),
          variants: ['hover', 'focus', 'active', 'group-hover'],
        }
      )
      return patterns
    }, [])

    tailwindConfig.theme = tailwindConfig.theme || {}
    tailwindConfig.theme.extend = tailwindConfig.theme.extend || {}
    tailwindConfig.theme.extend.colors = { ...tailwindConfig.theme.extend.colors, ...extendColors }
    tailwindConfig.safelist = tailwindConfig.safelist || []
    tailwindConfig.safelist.push(...colorPatterns)

    tailwindConfig.theme.extend.colors.primary = {
      1: 'var(--color-primary-1)',
      2: 'var(--color-primary-2)',
      3: 'var(--color-primary-3)',
      4: 'var(--color-primary-4)',
      5: 'var(--color-primary-5)',
      6: 'var(--color-primary-6)',
      7: 'var(--color-primary-7)',
      8: 'var(--color-primary-8)',
      9: 'var(--color-primary-9)',
      10: 'var(--color-primary-10)',
      11: 'var(--color-primary-11)',
      12: 'var(--color-primary-12)',
      DEFAULT: 'var(--color-primary-9)',
    }
  })


  const colorsWithoutPrimary = colors.filter(color => color !== 'primary')

  const template = addTemplate({
    filename: 'radix-colors.css',
    write: true,
    getContents: () => `/* Generated by mockline */
${ colorsWithoutPrimary.map(color => `@import "@radix-ui/colors/${ color }.css";`).join('\n') }
${ colorsWithoutPrimary.map(color => `@import "@radix-ui/colors/${ color }-alpha.css";`).join('\n') }
${ colorsWithoutPrimary.map(color => `@import "@radix-ui/colors/${ color }-dark.css";`).join('\n') }
${ colorsWithoutPrimary.map(color => `@import "@radix-ui/colors/${ color }-dark-alpha.css";`).join('\n') }
    `
  })

  nuxt.options.css.unshift(template.dst)

  addTypeTemplate({
    filename: 'types/colors.d.ts',
    getContents: () => `// Generated by mockline
    export type GrayColor = '${ grayColors.join('\' | \'') }'
    export type Color = GrayColor | '${ colors.join('\' | \'') }'
    export const grayColors: GrayColor[] = ${ JSON.stringify(grayColors) }
    export const colors: Color[] = ${ JSON.stringify(colors) }`
  })

  addTypeTemplate({
    filename: 'types/ui.d.ts',
    getContents: () => `// Generated by mockline
      declare module 'nuxt/schema' {
        type AppConfigInput = {
          mockline?: AppConfigMockline
        }
      }
      declare module '@nuxt/schema' {
        type AppConfigInput = {
          mockline?: AppConfigMockline
        }
      }`
  })
}
