import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import type { Nuxt } from '@nuxt/schema'
import type { ModuleOptions } from './module'
import { colors, grayColors, generateScale } from './runtime/colors'

export function addTemplates(options: ModuleOptions, nuxt: Nuxt) {
  nuxt.hook('tailwindcss:config', (tailwindConfig) => {
    tailwindConfig.theme = tailwindConfig.theme || {}
    tailwindConfig.theme.extend = tailwindConfig.theme.extend || {}
    tailwindConfig.theme.extend.colors = tailwindConfig.theme.extend.colors || {}

    tailwindConfig.theme.extend.colors = {
      ...tailwindConfig.theme.extend.colors,
      ...colors.reduce((acc: Record<string, Record<string, string>>, color) => {
        acc[color] = generateScale(color)
        return acc
      }, {}),
    }
  })

  const template = addTemplate({
    filename: 'radix-colors.css',
    write: true,
    getContents: () => `/* Generated by mockline */
${ colors.map(color => `@import "@radix-ui/colors/${ color }.css";`).join('\n') }
${ colors.map(color => `@import "@radix-ui/colors/${ color }-alpha.css";`).join('\n') }
${ colors.map(color => `@import "@radix-ui/colors/${ color }-dark.css";`).join('\n') }
${ colors.map(color => `@import "@radix-ui/colors/${ color }-dark-alpha.css";`).join('\n') }
    `
  })

  nuxt.options.css.unshift(template.dst)

  addTypeTemplate({
    filename: 'types/colors.d.ts',
    getContents: () => `// Generated by mockline
    export type GrayColor = '${ grayColors.join('\' | \'') }'
    export type Color = GrayColor | '${ colors.join('\' | \'') }'
    export const grayColors: GrayColor[] = ${ JSON.stringify(grayColors) }
    export const colors: Color[] = ${ JSON.stringify(colors) }`
  })

  addTypeTemplate({
    filename: 'types/ui.d.ts',
    getContents: () => `// Generated by mockline
      declare module 'nuxt/schema' {
        type AppConfigInput = {
          mockline?: AppConfigMockline
        }
      }
      declare module '@nuxt/schema' {
        type AppConfigInput = {
          mockline?: AppConfigMockline
        }
      }`
  })
}
